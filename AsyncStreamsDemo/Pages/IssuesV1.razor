@page "/"
@inject IssuesProvider IssueService;

@{
    #nullable enable
}

<h3>
    <a href="https://github.com/@OwnerName" target="_blank">@OwnerName</a>
    /
    <a href="https://github.com/@OwnerName/@RepoName" target="_blank">@RepoName</a>
    issues
</h3>

<button class="btn btn-success" @onclick="StartLoading">Load</button>
<button class="btn btn-danger" @onclick="CancelLoading">Cancel</button>

@if (myIssues == null)
{
    <p>Issues count: @myIssuesCount</p>
}
else
{
    <p>Issues count: @myIssuesCount</p>

    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Category</th>
                <th>Author</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var issue in myIssues)
            {
                <tr>
                    <td style="max-width: 500px"><a href="@issue.Url" target="_blank">@issue.Title</a></td>
                    <td>@issue.Categorize()</td>
                    <td><a href="@issue.Author?.Url" target="_blank">@issue.Author?.Login</a></td>
                    <td>@(issue.State.ToString())</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private const string OwnerName = "dotnet";
    private const string RepoName = "roslyn";

    private IEnumerable<Issue>? myIssues;
    private int myIssuesCount;

    private CancellationTokenSource? myCancellationTokenSource;

    private async void StartLoading()
    {
        myIssues = null;
        myIssuesCount = 0;

        var progress = new ActionProgress(value =>
        {
            InvokeAsync(() =>
            {
                myIssuesCount = value;
                StateHasChanged();
            });
        });

        myCancellationTokenSource = new CancellationTokenSource();
        var ct = myCancellationTokenSource.Token;

        try
        {
            myIssues = await IssueService.GetIssuesAsync1(OwnerName, RepoName, progress, ct);

            StateHasChanged();
        }
        catch (OperationCanceledException)
        {
        }
    }

    private void CancelLoading()
    {
        myCancellationTokenSource?.Cancel();
    }

    public class ActionProgress : IProgress<int>
    {
        private readonly Action<int> myOnProgress;

        public ActionProgress(Action<int> onProgress)
        {
            myOnProgress = onProgress;
        }

        public void Report(int value)
        {
            myOnProgress(value);
        }
    }
}